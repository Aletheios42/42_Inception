# 42 Inception - WordPress LEMP Stack Dockerizado

## üìã Tabla de Contenidos

1. [Introducci√≥n](#introducci√≥n)
2. [Arquitectura del Proyecto](#arquitectura-del-proyecto)
3. [Flujo de Ejecuci√≥n Completo](#flujo-de-ejecuci√≥n-completo)
4. [Configuraci√≥n Detallada por Servicio](#configuraci√≥n-detallada-por-servicio)
5. [Redes y Vol√∫menes](#redes-y-vol√∫menes)
6. [Gesti√≥n de Secretos](#gesti√≥n-de-secretos)
7. [Comandos y Debugging](#comandos-y-debugging)
8. [Troubleshooting](#troubleshooting)

---

## üéØ Introducci√≥n

**Inception** es un proyecto de 42 School que consiste en dockerizar un stack LEMP (Linux, Nginx, MariaDB, PHP) con WordPress. El objetivo es crear una infraestructura containerizada completamente funcional usando **Docker Compose**.

### Requisitos del Proyecto
- **Nginx**: Solo tr√°fico HTTPS (puerto 443) con certificados TLS
- **WordPress + PHP-FPM**: CMS funcionando con PHP 8.2
- **MariaDB**: Base de datos para WordPress
- **Vol√∫menes persistentes**: Datos de WordPress y MariaDB
- **Red personalizada**: Comunicaci√≥n entre contenedores
- **Secrets**: Gesti√≥n segura de contrase√±as

---

## üèóÔ∏è Arquitectura del Proyecto

El proyecto sigue una arquitectura de tres capas donde cada servicio tiene una responsabilidad espec√≠fica:

**Capa de Presentaci√≥n (Nginx)**: Act√∫a como proxy reverso y terminador TLS. Recibe todas las peticiones HTTPS del navegador, maneja los certificados SSL y redirige las peticiones de archivos PHP al contenedor de WordPress. Tambi√©n sirve archivos est√°ticos directamente.

**Capa de Aplicaci√≥n (WordPress)**: Ejecuta PHP-FPM que procesa el c√≥digo de WordPress. No tiene conexi√≥n directa con el exterior, solo recibe peticiones FastCGI desde Nginx. Se comunica con la base de datos para obtener y almacenar datos.

**Capa de Datos (MariaDB)**: Almacena toda la informaci√≥n de WordPress: posts, usuarios, configuraciones, etc. Solo acepta conexiones desde el contenedor de WordPress, nunca del exterior.

**Red Docker (wp_net)**: Todos los contenedores est√°n conectados a una red bridge personalizada que permite la comunicaci√≥n interna usando nombres de host (nginx, wordpress, mariadb) en lugar de IPs.

**Vol√∫menes Persistentes**: Los datos importantes (archivos de WordPress y base de datos) se almacenan en vol√∫menes Docker que persisten incluso si los contenedores se destruyen.

---

## üöÄ Flujo de Ejecuci√≥n Completo

### Inicializaci√≥n del Sistema

Cuando ejecutas `make build up`, Docker Compose orquesta el arranque de todos los servicios siguiendo un orden espec√≠fico basado en las dependencias declaradas.

### Fase 1: Construcci√≥n de Im√°genes

Docker construye tres im√°genes personalizadas basadas en Alpine Linux. Cada Dockerfile instala los paquetes necesarios, copia los archivos de configuraci√≥n y scripts, y define el comando que se ejecutar√° cuando el contenedor arranque.

### Fase 2: Arranque de MariaDB

MariaDB es el primer servicio en arrancar porque WordPress depende de √©l. El script de inicializaci√≥n verifica si la base de datos ya existe. Si es la primera ejecuci√≥n, instala MariaDB desde cero, crea la base de datos 'wordpress', y configura los usuarios con los permisos correctos.

Un aspecto cr√≠tico es la configuraci√≥n de red. MariaDB debe escuchar no solo en el socket Unix local, sino tambi√©n en el puerto TCP 3306 en todas las interfaces de red. Esto permite que WordPress, ejecut√°ndose en otro contenedor, pueda conectarse.

El script crea m√∫ltiples versiones del usuario `wp_user` para diferentes contextos de conexi√≥n: localhost, el hostname espec√≠fico que Docker asigna, y rangos de IP. Esto es necesario porque MySQL/MariaDB valida tanto el usuario como el host desde donde se conecta.

### Fase 3: Arranque de WordPress

Una vez que MariaDB est√° operativo (verificado por el healthcheck), WordPress puede arrancar. El script configura PHP-FPM para escuchar en todas las interfaces en el puerto 9000, no solo en localhost.

WordPress en s√≠ viene preinstalado en la imagen, pero el archivo wp-config.php se genera din√°micamente sustituyendo placeholders con los valores reales de la base de datos obtenidos desde los secrets.

Un detalle importante es que PHP-FPM debe configurarse espec√≠ficamente para entornos Docker, cambiando la configuraci√≥n de 'listen' para aceptar conexiones desde otros contenedores.

### Fase 4: Arranque de Nginx

Nginx es el √∫ltimo en arrancar. Primero genera un certificado TLS autofirmado usando OpenSSL con el dominio especificado. Luego valida su configuraci√≥n antes de iniciar el servicio.

La configuraci√≥n de Nginx incluye un bloque server que maneja HTTPS exclusivamente, con proxy reverso hacia WordPress para archivos PHP y servicio directo de archivos est√°ticos.

### Flujo de una Petici√≥n Web

Cuando un usuario navega a tu sitio, ocurre la siguiente secuencia:

1. **Resoluci√≥n DNS**: El navegador resuelve el dominio (configurado en /etc/hosts para desarrollo local)
2. **Conexi√≥n TLS**: Se establece el handshake SSL/TLS con Nginx
3. **Procesamiento Nginx**: Nginx eval√∫a la petici√≥n contra sus reglas de location
4. **Delegaci√≥n FastCGI**: Para archivos PHP, Nginx env√≠a la petici√≥n a WordPress v√≠a FastCGI
5. **Procesamiento PHP**: WordPress ejecuta el c√≥digo PHP, que puede requerir consultas a la base de datos
6. **Consulta Database**: PHP se conecta a MariaDB usando las credenciales configuradas
7. **Respuesta**: La cadena se invierte, devolviendo el HTML generado al navegador

---

## ‚öôÔ∏è Configuraci√≥n Detallada por Servicio

### Nginx - Proxy Reverso y Terminaci√≥n TLS

Nginx act√∫a como el punto de entrada √∫nico al sistema. Su configuraci√≥n principal incluye un bloque server que escucha exclusivamente en el puerto 443 con SSL habilitado. La directiva server_name especifica qu√© dominios acepta.

Los certificados TLS se generan autom√°ticamente al arrancar el contenedor. Aunque son autofirmados (no v√°lidos para producci√≥n), permiten cifrar el tr√°fico y cumplir con los requisitos del proyecto.

La configuraci√≥n de proxy reverso usa FastCGI para comunicarse con WordPress. Esto es m√°s eficiente que HTTP porque FastCGI mantiene procesos PHP persistentes, evitando el overhead de crear/destruir procesos para cada petici√≥n.

### WordPress - Gestor de Contenido y PHP-FPM

El contenedor WordPress ejecuta PHP-FPM en lugar del m√≥dulo Apache tradicional. PHP-FPM es un gestor de procesos PHP que permite mejor control sobre recursos y rendimiento.

WordPress viene preinstalado, pero wp-config.php se genera din√°micamente al arrancar el contenedor. Este archivo contiene configuraciones cr√≠ticas como credenciales de base de datos, claves de seguridad y configuraciones espec√≠ficas del entorno.

Las claves de seguridad (salt keys) se generan autom√°ticamente y son √∫nicas para cada instalaci√≥n. Estas claves se usan para cifrar cookies y sesiones, mejorando la seguridad.

### MariaDB - Base de Datos

MariaDB se configura con m√∫ltiples archivos de configuraci√≥n que se procesan en orden. El archivo principal (50-server.cnf) contiene configuraciones b√°sicas, mientras que el archivo Docker-espec√≠fico (99-docker.cnf) sobrescribe configuraciones para el entorno containerizado.

La configuraci√≥n de usuarios es compleja porque MySQL/MariaDB valida tanto el nombre de usuario como el host de origen. Docker asigna hostnames espec√≠ficos a los contenedores, por lo que es necesario crear el usuario para m√∫ltiples patrones de host.

El charset se configura como utf8mb4 para soportar completamente Unicode, incluyendo emojis y caracteres especiales que WordPress puede usar.

---

## üåê Redes y Vol√∫menes

### Red Personalizada

Docker Compose crea autom√°ticamente una red bridge personalizada llamada `wp_net`. Esta red proporciona aislamiento de otras aplicaciones Docker y permite que los contenedores se comuniquen usando nombres de host en lugar de IPs.

La red asigna autom√°ticamente direcciones IP del rango 172.18.0.0/16, con el gateway en 172.18.0.1. Cada contenedor recibe una IP fija dentro de este rango, pero lo importante es que pueden referenciarse por nombre.

Docker incluye un servidor DNS interno que resuelve los nombres de los servicios (nginx, wordpress, mariadb) a sus IPs correspondientes. Esto hace que la configuraci√≥n sea m√°s robusta porque no depende de IPs espec√≠ficas.

### Vol√∫menes Persistentes

Los vol√∫menes Docker permiten que los datos persistan independientemente del ciclo de vida de los contenedores. Se crean dos vol√∫menes principales:

**wordpress_data**: Almacena todos los archivos de WordPress incluyendo el core, temas, plugins, uploads y wp-config.php. Esto asegura que cualquier personalizaci√≥n o contenido subido no se pierda al reiniciar.

**mariadb_data**: Contiene todos los archivos de la base de datos incluyendo tablas, √≠ndices, logs de transacciones y configuraciones. Es cr√≠tico para la persistencia de datos.

Los vol√∫menes se almacenan f√≠sicamente en el host Docker pero est√°n gestionados completamente por Docker. Esto abstrae la gesti√≥n del almacenamiento mientras proporciona persistencia.

---

## üîê Gesti√≥n de Secretos

Docker Compose incluye un sistema de secrets que permite gestionar informaci√≥n sensible de forma segura. Los secrets se definen como archivos externos que se montan como archivos de solo lectura dentro de los contenedores.

Cada secret aparece como un archivo en /run/secrets/ dentro del contenedor. Los scripts pueden leer estos archivos para obtener contrase√±as y configuraciones sensibles sin tenerlas hardcodeadas.

Este enfoque es m√°s seguro que usar variables de entorno porque los secrets no aparecen en la lista de procesos, logs de Docker, o inspecci√≥n de contenedores. Adem√°s, tienen permisos restrictivos de solo lectura.

Los secrets se usan para las contrase√±as de la base de datos (root y usuario), credenciales de WordPress (admin y usuario regular), y cualquier otra informaci√≥n sensible necesaria para la aplicaci√≥n.

---

## üõ†Ô∏è Comandos y Debugging

### Gesti√≥n del Proyecto

El Makefile proporciona comandos simplificados para gestionar todo el stack. `make build` construye las im√°genes, `make up` arranca los servicios, y `make fclean` realiza una limpieza completa incluyendo vol√∫menes.

Para debugging, puedes acceder a los logs de cualquier servicio espec√≠ficamente o ver logs de todos los servicios simult√°neamente. Los logs muestran tanto la salida est√°ndar como errores, facilitando la identificaci√≥n de problemas.

### Testing de Conectividad

Puedes probar la conectividad entre contenedores usando herramientas como ping y netcat. Esto es √∫til para verificar que la red Docker funciona correctamente y que los servicios est√°n escuchando en los puertos esperados.

Para verificar que los servicios est√°n funcionando correctamente, puedes usar comandos espec√≠ficos como conectarse directamente a MariaDB, verificar que PHP puede conectar a la base de datos, o comprobar que Nginx puede hacer proxy a WordPress.

### Inspecci√≥n de Estado

Docker proporciona comandos para inspeccionar el estado de redes, vol√∫menes y contenedores. Esto es invaluable para entender c√≥mo Docker ha configurado la infraestructura y diagnosticar problemas de configuraci√≥n.

---

## üîß Troubleshooting

### Problemas de Conectividad de Red

Los errores de "Connection refused" suelen indicar que un servicio no est√° escuchando en el puerto esperado o que hay problemas de configuraci√≥n de red. El diagn√≥stico t√≠pico involucra verificar que los contenedores est√°n en la misma red, que los puertos est√°n abiertos, y que los servicios est√°n configurados para escuchar en todas las interfaces.

### Problemas de Autenticaci√≥n de Base de Datos

Los errores de "Access denied" en MySQL/MariaDB suelen deberse a problemas en la configuraci√≥n de usuarios. MySQL valida tanto el usuario como el host, y Docker puede usar hostnames espec√≠ficos que no coinciden con la configuraci√≥n inicial del usuario.

La soluci√≥n t√≠pica involucra crear el usuario para m√∫ltiples patrones de host o identificar exactamente desde qu√© hostname se est√° conectando WordPress.

### Problemas de Proxy y FastCGI

Cuando Nginx no puede conectar con WordPress, suele ser porque PHP-FPM no est√° configurado correctamente para aceptar conexiones de otros contenedores, o porque la configuraci√≥n FastCGI de Nginx tiene errores.

### Problemas de Certificados

Los navegadores modernos son estrictos con los certificados SSL. Los certificados autofirmados requieren excepciones manuales o configuraci√≥n espec√≠fica del navegador para ser aceptados.

### Problemas de Persistencia

Si los datos no persisten entre reinicios, puede ser que los vol√∫menes no est√©n configurados correctamente, que los paths de montaje sean incorrectos, o que haya problemas de permisos dentro de los contenedores.

---

## üìö Conceptos Clave del Proyecto

### ¬øPor qu√© esta Arquitectura?

La separaci√≥n de servicios en contenedores individuales sigue principios de microservicios: cada contenedor tiene una responsabilidad espec√≠fica, pueden escalarse independientemente, y los fallos est√°n aislados.

### Seguridad por Dise√±o

El uso de una red personalizada a√≠sla los servicios del exterior. Solo Nginx expone puertos p√∫blicos, mientras que WordPress y MariaDB son inaccesibles directamente desde fuera del stack.

### Persistencia vs Inmutabilidad

Los contenedores son inmutables (se destruyen y recrean), pero los datos importantes persisten en vol√∫menes. Esto permite actualizaciones limpias mientras se mantiene la informaci√≥n cr√≠tica.

### Configuraci√≥n Din√°mica

Los scripts de inicializaci√≥n permiten que la misma imagen Docker funcione en diferentes entornos simplemente cambiando variables de entorno y secrets, sin necesidad de reconstruir im√°genes.

---

Este README explica la filosof√≠a, arquitectura y funcionamiento de tu proyecto Inception sin duplicar c√≥digo que ya est√° visible en los archivos del proyecto. Cada secci√≥n se enfoca en el **por qu√©** y **c√≥mo** en lugar del **qu√©**.
